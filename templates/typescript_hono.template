import { Hono } from 'hono'
import { serve } from '@hono/node-server'
{% include "TYPESCRIPT_SCHEMA" %}
{% include "TYPESCRIPT_OPERATION" %}
{% set INTERFACE_NAME="#/info/title"|include_pointer|to_pascal_case%}
// This is generated by mandolin https://github.com/lzpel/mandolin from OpenApi specification

{%- for pointer, operation in ls_operation() %}
{{OPERATION_REQUEST(pointer, operation)}}
{{OPERATION_RESPONSE(pointer, operation)}}
{%- endfor %}
{{ IDENTIFIED_SCHEMA_DRAIN() }}

interface {{INTERFACE_NAME}}{
{%- for pointer, operation in ls_operation() %}
	// {{(pointer|split)[-1]}} {{(pointer|split)[-2]}}
	{{OPERATION_NAME(pointer,operation)}}?(request: {{OPERATION_REQUEST_NAME(pointer,operation)}}): Promise<{{OPERATION_RESPONSE_NAME(pointer,operation)}}>
{%- endfor %}
}

export function addHonoOperations(app: Hono, implement: {{INTERFACE_NAME}}){
{%- for pointer, operation in ls_operation() %}
	app.{{(pointer|split)[-1]}}('{{ (pointer|split)[-2] | re_replace('\\{(\\w+)\\}', ':$1') }}', async (c) => {
		if (implement.{{OPERATION_NAME(pointer,operation)}}===undefined)return c.text("not yet implemented", 500)
		const request: Partial<{{OPERATION_REQUEST_NAME(pointer,operation)}}> = {}
		{
{%- for parameter in operation.parameters|include_ref %}
{%- with parameter=parameter|include_ref %}
			let {{parameter.name|to_snake_case}} = c.req.{{ {"path":"param", "query":"query", "header":"header", "cookie":"cookie" }[parameter.in] }}("{{parameter.name}}")
{%- if parameter.required %}
			if({{parameter.name|to_snake_case}}===undefined)return c.text("required parameter '{{parameter.name}}' is not in '{{parameter.in}}'", 400)
{%- endif %}
			request.{{parameter.name}} = {{parameter.name|to_snake_case}};
{%- endwith %}
{%- endfor %}
		}
{%- if operation.requestBody %}
{%- for content_key, content in operation.requestBody.content|items %}
		request.body = {%- if "json" in content_key %}(await c.req.json()) as {{SCHEMA(pointer+"/requestBody/content/"+content_key|encode+"/schema", content.schema)}}
{%- elif "text" in content_key %}await c.req.text()
{%- else %}c.req.arrayBuffer()
{%- endif %}
{%- break %}
{%- endfor %}
{%- endif %}
		const response = await implement.{{OPERATION_NAME(pointer,operation)}}(request as {{OPERATION_REQUEST_NAME(pointer,operation)}})
		switch (response.code){
{%- for response_key, response in operation.responses|items %}
{%- with code=response_key|replace("default","500")%}
			case {{code}}:
{%- if response.content %}
{%- for contentType, media in response.content|items %}
{%- if "json" in contentType %} 
				return c.json(response.body, {{code}})
{%- elif media.schema.format and media.schema.format == "binary" %}
				return c.body(response.body, {{code}}, {'Content-Type': '{{contentType}}'})
{%- else %}
				return c.text(response.body, {{code}}, {'Content-Type': '{{contentType}}'})
{%- endif %}
{%- break %}
{%- endfor %}
{%- else %}
				return c.text("{{response.description}}")
{%- endif %}
{%- endwith %}
{%- endfor %}
		}
	})
{%- endfor %}
}
class TestServer implements {{INTERFACE_NAME}}{}
export function main(){
	const app = new Hono()
	addHonoOperations(app,new TestServer());
	serve({
		fetch: app.fetch,
		port: 3000
	}, (info) => {
		console.log(`Server is running on http://localhost:${info.port}`)
	})
}