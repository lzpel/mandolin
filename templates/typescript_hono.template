import { Hono } from 'hono'
import { serve } from '@hono/node-server'
{% include "TYPESCRIPT_SCHEMA" %}
{% include "TYPESCRIPT_OPERATION" %}
{% set INTERFACE_NAME="#/info/title"|include_pointer|to_pascal_case%}
// This is generated by mandolin https://github.com/lzpel/mandolin from OpenApi specification

{%- for pointer, operation in ls_operation() %}
{{OPERATION_REQUEST(pointer, operation)}}
{{OPERATION_RESPONSE(pointer, operation)}}
{%- endfor %}
{{ IDENTIFIED_SCHEMA_DRAIN() }}

interface {{INTERFACE_NAME}}{
{%- for pointer, operation in ls_operation() %}
	// {{(pointer|split)[-1]}} {{(pointer|split)[-2]}}
	{{OPERATION_NAME(pointer,operation)}}?(request: {{OPERATION_REQUEST_NAME(pointer,operation)}}): Promise<{{OPERATION_RESPONSE_NAME(pointer,operation)}}>
{%- endfor %}
}

export function addHonoOperations(app: Hono, implement: {{INTERFACE_NAME}}){
{%- for pointer, operation in ls_operation() %}
	app.{{(pointer|split)[-1]}}('{{(pointer|split)[-2]}}', (c) => {
		if (implement.{{OPERATION_NAME(pointer,operation)}}===undefined)return;
		const request: {{OPERATION_REQUEST_NAME(pointer,operation)}} = {
{%- for parameter in operation.parameters|include_ref %}
{%- with parameter=parameter|include_ref %}
			{{parameter.name}}:match {{parameter.in}}.get("{{parameter.name}}").and_then(|v| v.parse().ok())
{%- if parameter.required -%}
{Some(v)=>v, None=>return (axum::http::StatusCode::from_u16(400).unwrap(),[(axum::http::header::CONTENT_TYPE, "text/plain")], format!("parse error: {{parameter.name}} in {{parameter.in}}={:?}", {{parameter.in}}).as_bytes().to_vec())}
{%- else -%}
{Some(v)=>Some(v), None=>None}
{%- endif -%},
{%- endwith %}
{%- endfor %}
{%- if operation.requestBody %}
{%- for content_key, content in operation.requestBody.content|items %}
			body:
{%- if "json" in content_key -%}
match serde_json::from_slice(body.to_vec().as_slice()){Ok(v)=>v,Err(v) => { return (axum::http::StatusCode::INTERNAL_SERVER_ERROR,[(axum::http::header::CONTENT_TYPE, "text/plain")], format!("{:?}", v).as_bytes().to_vec())}}
{%- else %}
body.into()
{%- endif %}
{%- break %}
{%- endfor %},
{%- endif %}
		}
		const response = await implement.{{OPERATION_NAME(pointer,operation)}}(request)
		switch (response.code){
{%- for response_key, response in operation.responses|items %}
{%- with code=response_key|replace("default","500")%}
			case {{code}}:
{%- if response.content %}
{%- for contentType, media in response.content|items %}
{%- if "json" in contentType %} 
				return c.json(response.body, {{code}})
{%- elif media.schema.format and media.schema.format == "binary" %}
				return c.body(response.body, {{code}}, {'Content-Type': '{{contentType}}'})
{%- else %}
				return c.text(response.body, {{code}}, {'Content-Type': '{{contentType}}'})
{%- endif %}
{%- break %}
{%- endfor %}
{%- else %}
				return c.text("{{response.description}}")
{%- endif %}
{%- endwith %}
{%- endfor %}
		}
	})
{%- endfor %}
class TestServer implements SimpleAPI{}
export function main(){
	const app = new Hono()
	addHonoOperations(app,new TestServer());
	serve({
		fetch: app.fetch,
		port: 3000
	}, (info) => {
		console.log(`Server is running on http://localhost:${info.port}`)
	})
}