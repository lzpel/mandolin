{%- macro SCHEMA_NAME(pointer) %}
{%- if schema_push(pointer, none) %}
{%- do schema_push(pointer, IDENTIFIED_SCHEMA(pointer, pointer|include_pointer)) %}
{%- endif %}{{pointer|replace("#/components/schemas/","")|decode|to_pascal_case}}
{%- endmacro %}

{%- macro SCHEMA(pointer,schema) -%}
{%- if schema.type -%}
{%- if schema.type == "object" -%}
{%- if schema.additionalProperties %}HashMap<String,{{SCHEMA(pointer+"/additionalProperties", schema.additionalProperties)}}>
{%- else %}{{SCHEMA_NAME(pointer)}}
{%- endif %}
{%- elif schema.type == "array" -%}
Vec<{{SCHEMA(pointer+"/items",schema.items)}}>
{%- elif schema.type == "integer" -%}
{%- if "u" in schema.format -%}u{%- else -%}i{%- endif -%}{%- if "int128" in schema.format -%}128{%- elif "int64" in schema.format -%}64{%- elif "int32" in schema.format -%}32{%- else -%}8{%- endif -%}
{%- elif schema.type == "string" -%}
{%- if schema.format == "binary" -%}Vec<u8>
{%- elif schema.format == "uuid" -%}uuid::Uuid
{%- else -%}String
{%- endif -%}
{%- elif schema.type == "number" -%}
f64
{%- elif schema.type == "boolean" -%}
bool
{%- else -%}
{%- endif %}
{%- elif schema["$ref"] -%}
{{SCHEMA_NAME(schema["$ref"])}}
{%- else -%}
u8
{%- endif %}
{%- endmacro -%}

{%- macro IDENTIFIED_SCHEMA(pointer, schema) %}
{%- if schema.type == "object" %}
#[derive(Default,Clone,Debug,serde::Serialize,serde::Deserialize)]
pub struct {{SCHEMA_NAME(pointer)}}{{'{'}}
{%- for property_key, property in schema.properties|items %}
{%- with inner=SCHEMA(pointer+"/properties/"+property_key, property) %}
	pub r#{{property_key}}:{%- if schema.required and property_key in schema.required %}{{inner}}{%- else %}Option<{{inner}}>{%- endif %},
{%- endwith %}
{%- endfor %}
}
{%- else %}
pub type {{SCHEMA_NAME(pointer)}}={{SCHEMA(pointer, schema)}};
{%- endif %}
{%- endmacro %}

{%- for pointer, schema in ls_schema() -%}
{%- if "/" not in pointer|replace('#/components/schemas/',"") %}
{{ IDENTIFIED_SCHEMA(pointer, schema) }}
{% endif %}
{%- endfor %}


{%- macro IDENTIFIED_SCHEMA_DRAIN() %}
{%- for pointer, output in schema_drain()|items -%}
{{output}}
{%- endfor %}
{%- endmacro %}