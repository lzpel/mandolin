use axum;
pub fn axum_router_operations<S:Server>()->axum::Router{
	axum::Router::new()
{%- for pointer, operation in ls_operation() %}
		.route("{{(pointer|split)[-2]}}", axum::routing::{{(pointer|split)[-1]}}(|
			path: axum::extract::Path<HashMap<String,String>>,
			query: axum::extract::Query<HashMap<String,String>>,
			header: axum::http::HeaderMap,
{%- if operation.requestBody %}
			body: axum::body::Bytes,
{%- endif%}
		| async move{
			let ret=S::{{OPERATION_NAME(pointer,operation)}}({{OPERATION_REQUEST_NAME(pointer,operation)}}{
{%- for parameter in operation.parameters %}
				r#{{parameter.name}}:match {{parameter.in}}.get("{{parameter.name}}").and_then(|v| v.parse().ok())
{%- if parameter.required -%}
{Some(v)=>v, None=>return (axum::http::StatusCode::from_u16(400).unwrap(),[(axum::http::header::CONTENT_TYPE, "text/plain")], format!("parse error: {{parameter.name}} in {{parameter.in}}={:?}", {{parameter.in}}).as_bytes().to_vec())}
{%- else -%}
{Some(v)=>Some(v), None=>None}
{%- endif -%},
{%- endfor %}
{%- if operation.requestBody %}
{%- for content_key, content in operation.requestBody.content|items %}
				body:
{%- if "json" in content_key -%}
match serde_json::from_slice(body.to_vec().as_slice()){Ok(v)=>v,Err(v) => { return (axum::http::StatusCode::INTERNAL_SERVER_ERROR,[(axum::http::header::CONTENT_TYPE, "text/plain")], format!("{:?}", v).as_bytes().to_vec())}}
{%- else -%}
body.into()
{%- endif -%}
{%- endfor -%}
{%- endif %}
{%- if operation.request_body %}
				body:
{%- if "json" in operation.request_body.default_content.media_type -%}
match serde_json::from_slice(body.to_vec().as_slice()){Ok(v)=>v,Err(v) => { return (axum::http::StatusCode::INTERNAL_SERVER_ERROR,[(axum::http::header::CONTENT_TYPE, "text/plain")], format!("{:?}", v).as_bytes().to_vec())}}
{%- else -%}
body.into()
{%- endif -%}
,
{%- endif %}
			}).await;
			match ret{
{%- for response_key, response in operation.responses|items %}
				{{OPERATION_RESPONSE_NAME(pointer,operation)}}::{{("status_"+response_key)|to_pascal_case}}{%- if response.content -%}(v){%- endif -%} => (axum::http::StatusCode::from_u16({{response_key|replace("default","500")}}).unwrap(),
{%- if response.content -%}
{%- for contentType, media in response.content|items %}
[(axum::http::header::CONTENT_TYPE, "{{contentType}}")],
{%- if "json" in contentType-%}serde_json::to_vec_pretty(&v).expect("error serialize response json")
{%- elif media.schema.format and media.schema.format == "binary" -%}v
{%- else -%}v.as_bytes().to_vec()
{%- endif -%}
{%- endfor %}
{%- else -%}
[(axum::http::header::CONTENT_TYPE, "text/plain")], "{{response.description}}".as_bytes().to_vec()
{%- endif -%}
),
{%- endfor %}
			}
		}))
{%- endfor %}
		.route("/openapi.json", axum::routing::get(|| async move{
			r###"{{"#"|p|tojson}}"###
		}))
		.route("/ui", axum::routing::get(|| async move{
			axum::response::Html(r###"
			<html lang="en">
			<head>
			  <meta charset="utf-8" />
			  <meta name="viewport" content="width=device-width, initial-scale=1" />
			  <meta name="description" content="SwaggerUI" />
			  <title>SwaggerUI</title>
			  <link rel="stylesheet" href="https://unpkg.com/swagger-ui-dist@5.11.0/swagger-ui.css" />
			</head>
			<body>
			<div id="swagger-ui"></div>
			<script src="https://unpkg.com/swagger-ui-dist@5.11.0/swagger-ui-bundle.js" crossorigin></script>
			<script>
			  window.onload = () => {
				window.ui = SwaggerUIBundle({
				  url: location.href.replace("/ui","/openapi.json"),
				  dom_id: '#swagger-ui',
				});
			  };
			</script>
			</body>
			</html>
			"###)
		}))
}
{% with servers = ls("#/servers/") or [("/", {"url": "/api"})] %}
pub fn axum_router<S:Server>()->axum::Router{
	axum::Router::new()
{%- for pointer, server in servers %}
		.nest_service("{{server.url}}", axum_router_operations::<S>())
{%- endfor %}
}

pub fn print_axum_router(port:u16){
{%- for pointer, server in servers %}
	println!("http://localhost:{}{{server.url}}/ui", port);
{%- endfor %}
}
{% endwith %}
pub struct TestServer{}
impl Server for TestServer{}
#[allow(dead_code)]
#[tokio::main]
async fn main() {
	let app = axum_router::<TestServer>().layer(axum::extract::DefaultBodyLimit::disable());
    let port:u16 = std::env::var("PORT").unwrap_or("8080".to_string()).parse().expect("PORT should be integer");
	print_axum_router(port);
	let listener = tokio::net::TcpListener::bind(format!("0.0.0.0:{port}")).await.unwrap();
    axum::serve(listener, app)
        .with_graceful_shutdown(async { tokio::signal::ctrl_c().await.unwrap() })
        .await
        .unwrap();
}